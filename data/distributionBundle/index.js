#!/usr/bin/env node
// -*- coding: utf-8 -*-
/** @module index */
'use strict';

// region import
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requestHandler = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _clientnode = require("clientnode");
var _http = require("http");
var _polyfillLibrary = _interopRequireDefault(require("polyfill-library"));
var _url = _interopRequireDefault(require("url"));
var _process$argv$;
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
// endregion
// region types
var Flags = ['always', 'gated'];
var UnknownTechnologyConfigurations = ['ignore', 'polyfill'];
// endregion
var requestHandler = exports.requestHandler = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee(request, response) {
    var queryParameter, excludes, _iterator, _step, parameter, features, _iterator2, _step2, _parameter, flags, _iterator3, _step3, _parameter2, givenUnknown, unknown, featureOptions, _iterator4, _step4, feature, _configuration, option, configuration, _t, _t2, _t3;
    return _regenerator["default"].wrap(function (_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          console.info('Got request url', request.url);
          if (!request.url.startsWith('/polyfill.')) {
            _context.next = 2;
            break;
          }
          // region parse query parameter
          queryParameter = _url["default"].parse(request.url, true).query;
          excludes = [];
          _iterator = _createForOfIteratorHelper([].concat(queryParameter.excludes || []));
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              parameter = _step.value;
              excludes = excludes.concat(parameter.split(','));
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          features = [];
          _iterator2 = _createForOfIteratorHelper([].concat(queryParameter.features || []));
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              _parameter = _step2.value;
              features = features.concat(_parameter.split(','));
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          flags = [];
          _iterator3 = _createForOfIteratorHelper([].concat(queryParameter.flags || []));
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              _parameter2 = _step3.value;
              flags = flags.concat(_parameter2.split(',').filter(function (flagCandidate) {
                return Flags.includes(flagCandidate);
              }));
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
          givenUnknown = [].concat(queryParameter.unknown || []);
          unknown = givenUnknown.length && UnknownTechnologyConfigurations.includes(givenUnknown[0]) ? givenUnknown[0] : 'polyfill'; // endregion
          // region build feature options
          featureOptions = {};
          _iterator4 = _createForOfIteratorHelper(features);
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              feature = _step4.value;
              _configuration = feature.split('|');
              option = _configuration[0];
              featureOptions[option] = {
                flags: _configuration.length > 1 ? _configuration[1] : flags
              };
            }
            // endregion
            // region build configuration and log
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
          configuration = {
            excludes: excludes,
            features: featureOptions,
            minify: request.url.includes('.min.js?'),
            uaString: request.headers['user-agent'],
            unknown: unknown
          };
          console.info('Apply polyfill configuration: "' + "".concat((0, _clientnode.represent)(configuration), "\""));
          // endregion
          // region write response
          response.statusCode = 200;
          response.setHeader('Content-Type', 'text/javascript; charset=utf-8');
          _t = response;
          _context.next = 1;
          return _polyfillLibrary["default"].getPolyfillString(configuration);
        case 1:
          _t2 = _context.sent;
          _t.write.call(_t, _t2);
          _context.next = 3;
          break;
        case 2:
          response.statusCode = 404;
        case 3:
          _context.next = 5;
          break;
        case 4:
          _context.prev = 4;
          _t3 = _context["catch"](0);
          console.warn('Error occurred:', _t3);
          response.statusCode = 500;
        case 5:
          _context.prev = 5;
          response.end();
          return _context.finish(5);
        case 6:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 4, 5, 6]]);
  }));
  return function requestHandler(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var instance = (0, _http.createServer)(function () {
  void requestHandler.apply(void 0, arguments);
});
var port = parseInt((_process$argv$ = process.argv[2]) !== null && _process$argv$ !== void 0 ? _process$argv$ : process.env.PORT ? process.env.PORT : 8080);
instance.listen(port, function () {
  console.info("Listen on port ".concat(String(port), " for incoming requests."));
});
var _iterator5 = _createForOfIteratorHelper(_clientnode.CLOSE_EVENT_NAMES),
  _step5;
try {
  var _loop = function _loop() {
    var name = _step5.value;
    process.on(name, function () {
      console.info("\nGot \"".concat(name, "\" signal: stopping server."));
      instance.close(function () {
        console.info('Server stopped.');
      });
    });
  };
  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
    _loop();
  }
} catch (err) {
  _iterator5.e(err);
} finally {
  _iterator5.f();
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,